version: '3.4'

services:

  # Peregrine, our discord bot
  peregrine:
    container_name: peregrine
    image: "ghcr.io/langaracpsc/peregrine:latest"
    networks:
      - backend
    environment:
      - DISCORD_BOT_TOKEN
      - WATCHTOWER_HTTP_API_TOKEN


  # Website
  langaracpsc-next:
    container_name: website
    ports:
      - '3200:3000'
    image: "ghcr.io/langaracpsc/langaracpsc-next:latest"
    networks:
      - backend

  # Hackathon Website
  lhacks2024:
    container_name: lhacks-website
    ports:
      - '5500:3000'
    image: "ghcr.io/langaracpsc/lhacks2024:latest"
    networks:
      - backend
   

  # Website API
  # THIS IS BROKEN DUE TO CORS
  # langaracpsc.webapi:
  #   container_name: webapi
  #   image: "ghcr.io/langaracpsc/langaracpsc.webapi:latest"
  #   depends_on:
  #     - "postgres_image"
  #   ports:
  #     - "8000:8080"
  #   networks:
  #     - backend
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./ExecImages:/app/Images
  #   environment:
  #     - HOSTNAME=${PG_HOSTNAME}
  #     - DATABASE=${PG_DATABASE}
  #     - USERNAME=${PG_USERNAME}
  #     - PASSWORD=${PG_PASSWORD}
  #     - PORT=${PG_PORT}
  #     - CAL_ID=${CAL_ID}

  # Postgres database that backs langaracpsc.webapi
  # postgres_image:
  #   container_name: postgres
  #   image: postgres:latest
  #   restart: always
  #   networks:
  #     - backend
  #   volumes:
  #     - postgres_db:/var/lib/postgres/data
  #     - ./data/db:/var/lib/postgres/db
  #   environment:
  #     - POSTGRES_PASSWORD=${PG_PASSWORD}
  #     - POSTGRES_USER=${PG_USERNAME}

  # notion api
  notion-web-api-backend:
    image: "ghcr.io/langaracpsc/notion-web-api-backend:latest"
    volumes:
      - "./data/notion-web-api:/data"
    environment:
      NOTION_API_TOKEN: ${NOTION_API_TOKEN}
      API_URL: ${NOTION_API_URL}


  notion-web-api-fastapi:
    depends_on:
      - notion-web-api-backend
    ports:
      - '3500:5000'
    image: "ghcr.io/langaracpsc/notion-web-api-fastapi:latest"
    volumes:
      - "./data/notion-web-api:/data"
    environment:
      NOTION_API_TOKEN: ${NOTION_API_TOKEN}
      API_URL: ${NOTION_API_URL}



  # Langara Course API
  # PINNED TO LAST COMMIT OF LEGACY VERSION 
  # DO NOT UPDATE UNTIL DEPENDENCIES ARE
  # langara-api-legacy:
  #   container_name: langaraapi-legacy
  #   # ports:
  #   #   - '5000:5000'
  #   image: "ghcr.io/langaracpsc/langaracoursewatcher@sha256:935111ab3b22926a4bbc99b67c440f84e96b537090862493eb4b6e0a45ece066"
  #   # networks:
  #   #   - backend
  #   volumes:
  #     - course_watcher_db:/database
  #   environment:
  #     DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
  #     # DEBUG_MODE: true
  #   labels:
  #     - "com.centurylinklabs.watchtower.enable=false"

  # api for the langara watcher
  langara-watcher-api:
    container_name: langara-watcher-api
    ports:
      - '5010:8000'
    image: "ghcr.io/langaracpsc/langaracoursewatcher-api:latest"
    networks:
      - backend
    volumes:
      - "./data/langara-api:/database"
    # environment:
    #   API_KEY: ${COURSES_API_KEY}
    #   PYTHONUNBUFFERED: 1

  # fetches info from langara websites
  langara-watcher-backend:
    container_name: langara-watcher-backend
    ports:
      - '8000:8000'
    image: "ghcr.io/langaracpsc/langaracoursewatcher-backend:latest"
    networks:
      - backend
    volumes:
      - ./data/langara-api:/database
  
  # Langara Course Planner
  langara-course-planner:
    container_name: langara-course-planner
    depends_on:
      - "langara-watcher-api"
    ports:
      - '5002:5000'
    image: 'ghcr.io/langaracpsc/langaracourseplanner:latest'
  

  lcsc-links:
    container_name: lcsc-links
    ports:
      - '5020:5000'
    image: 'ghcr.io/langaracpsc/links:latest'

  # === SYSADMIN TOOLS === #


  # NGINX manager
  nginx-proxy-manager:
    container_name: nginx-proxy-manager
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - nginxpm_data:/data
      - nginxpm_letsencrypt:/etc/letsencrypt
    networks:
      - backend



  # Portainer, docker container manager
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    ports:
      - 9443:9443
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped



  # Watchtower keeps images up to date
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    ports:
      - '8080:8080'
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    environment:
      # set timezone
      - TZ=America/Vancouver 
      # delete old containers
      - WATCHTOWER_CLEANUP=true
      # revive containers with updates
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=true

      # post updates to logging channel
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_LOG_CHANNEL}
      # but not startup messages
      - WATCHTOWER_NO_STARTUP_MESSAGE=true

      # Use HTTP request to check for an image update
      # curl -H "Authorization: Bearer token" localhost:8080/v1/update
      - WATCHTOWER_HTTP_API_UPDATE=true
      # Set token for HTTP request from .env
      - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_HTTP_API_TOKEN}
      # Also continue checking for updates automatically (every hour)
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_HTTP_API_PERIODIC_POLLS=true


networks:
  backend:
    driver: bridge


volumes:
  postgres_db:

  course_watcher_db:

  portainer_data:

  nginxpm_data:
  nginxpm_letsencrypt:
